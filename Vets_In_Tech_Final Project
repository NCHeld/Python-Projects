"""
            *** ON MARKET ***
This is the final Project for the Vets In Tech "Python Fundamentals" course that was completed by Nathan Held and I.
We are trying to find the distance to the nearest airport in the cities of: DALLAS, TEXAS & CHICAGO, ILLINOIS
from Multifamily Apartment Complexes that are currently for sale. 
"""

# ------------------------------------------------------------------

         # MAP API

# 1. Set Up Your Environment - Install necessary libraries





# 2. Choose A Map API & Fetch Data
# 2. Choose A Map API & Fetch Data
# 
# 2a. Airport API PIP Installation
pip install apiverve-airportslookup
# 
# 2b. Airport API Key
# API Key: e67a1284-b622-4338-8add-070e4452f61e from NCHeld linked GitHub at https://apiverve.com/dashboard/

# 2c. Import the client module
from apiverve_airportslookup.apiClient import AirportsAPIClient

# 2d. Initialize the client with your APIVerve API key
api = AirportsAPIClient("e67a1284-b622-4338-8add-070e4452f61e")

# List of airport queries
queries = [
    {"iata": "DFW"}, {"iata": "ADS"}, {"iata": "DAL"}, {"iata": "RBD"}, {"icao": "KGKY"},  # Dallas Airports
    {"iata": "ORD"}, {"iata": "PWK"}, {"iata": "DPA"}, {"iata": "MDW"}, {"iata": "GYY"}, {"iata": "RFD"}  # Chicago Airports
]

# Loop through each query and fetch results
for query in queries:
    result = api.execute(query)
    print(result)  # Print result for each query

result = api.execute(query)

# Print the result
print(result)



# 3. Write Data to Excel File



# ------------------------------------------------------------------

         # COMMERCIAL REAL ESTATE API

# 1. Set Up Your Environment - Install necessary libraries

# pip install openpyxl - if not already done

import requests
import json 

# 2. Choose A REAL ESTATE API & Fetch Data
        # fetch 10 Multifamily Family Apartment Complexes in Chicago, Illinois & Dallas, Texas from https://app.rentcast.io/app/api

# Your RentCast API key
API_KEY = "626c9fb38e184afc9a3f42586ee4bc98"

# API endpoint
url = "https://app.rentcast.io/app/api"

response = requests.get(url) 

# print to verify we have a status code of 200

print(response)     # <Response [200]> (500 if Server is down)


# Fetching data from the API for Dallas, Texas (FOR PROPERTIES SOLD WITHIN THE LAST YEAR)
Dallas_Query2 = "https://api.rentcast.io/v1/listings/sale?city=Dallas&state=TX&propertyType=Multi-Family&status=Active"

# Headers for authentication
headers = {
    "accept": "application/json",
    "X-Api-Key": API_KEY
}

# Fetch data from the RentCast API
ResponseDallas2 = requests.get(Dallas_Query2, headers=headers)

# Check response status

if ResponseDallas2.status_code == 200:
    data = ResponseDallas2.json()  # Parse JSON response
    print("Fetched Data:", data)
    print(data)
else:
    print(f"Failed to fetch data. Status code: {ResponseDallas2.status_code}, Message: {ResponseDallas2.text}")



print(f"Status Code: {ResponseDallas2.status_code}")
print(f"Response Text: {ResponseDallas2.text}")



# Fetching data from the API for Chicago, Illinois (FOR PROPERTIES SOLD WITHIN THE LAST YEAR)
Chicago_Query2 = "https://api.rentcast.io/v1/listings/sale?city=Chicago&state=IL&propertyType=Multi-Family&status=Active"

# Headers for authentication
headers = {
    "accept": "application/json",
    "X-Api-Key": API_KEY
}

# Fetch data from the RentCast API
ResponseChicago2 = requests.get(Chicago_Query2, headers=headers)

# Check response status

if ResponseChicago2.status_code == 200:
    data = ResponseChicago2.json()  # Parse JSON response
    print("Fetched Data:", data)
    print(data)
else:
    print(f"Failed to fetch data. Status code: {ResponseChicago2.status_code}, Message: {ResponseChicago2.text}")



print(f"Status Code: {ResponseChicago2.status_code}")
print(f"Response Text: {ResponseChicago2.text}")


# Write Data to an Excel File

import requests
import pandas as pd

# Fetch data for Dallas
Dallas_Data2 = ResponseDallas2.json() if ResponseDallas2.status_code == 200 else []

# Fetch data for Chicago
Chicago_Data2 = ResponseChicago2.json() if ResponseChicago2.status_code == 200 else []

# Convert JSON responses to DataFrames
df_dallas2 = pd.DataFrame(Dallas_Data2)
df_chicago2 = pd.DataFrame(Chicago_Data2)

# Create five blank rows (to separate datasets)
empty_rows = pd.DataFrame([[""] * len(df_dallas2.columns)] * 5, columns=df_dallas2.columns)

# Combine both DataFrames with a gap
df_combined = pd.concat([df_dallas2, empty_rows, df_chicago2], ignore_index=True)

# Define the file path
file_path = r"C:/Users/moise/Downloads/Data Analysis/VetsInTech/Python Fundamentals/Final Project/Final Project On Market Bulk CRE Data.xlsx"

# Save to Excel
df_combined.to_excel(file_path, index=False)

print(f"Data successfully saved to {file_path}")

# ------------------------------------------------------------------

         # COMBINE DATA

# 1. Combine Data in a meaningful way to a third spreadsheet
